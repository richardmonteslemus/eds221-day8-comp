---
title: "GGplot Practice"
format: html
---

```{r}
library(tidyverse)
library(here)
library(janitor)

```
## Ggplot Basics 

Read in lizard data 
```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

### The essentials 
- data 
- aesthetics
- geometry

```{r}
# ggplot essentials, 3 ways 

# first
# data awesthics stay consisent througout plot 
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + #(1 and 2)
  geom_point() # 3 

# second 
# data stays consisent througout plot
ggplot(data = lizards) + 
  geom_point(aes(x = total_length, y = weight))

# third 
ggplot() +
  geom_point(data = lizards, 
             aes(x = total_length, y = weight))

```

## Swap out geometries
```{r}
ggplot(data = lizards, 
       aes(x = total_length, y = weight)) + 
  geom_line()
```

Some geometry types only need one axis
```{r}
ggplot(data = lizards, 
       aes(x = total_length)) + 
  geom_histogram()
```

Jitterplots usually are best with one categorical and one continuous variable 
```{r}
ggplot(data = lizards, 
       aes(x = weight, 
           y = common_name)) + 
  geom_jitter()
```

## Aesthetic Mapping
### Updating based on a constant value 
Don't need to use the 'aes()' function! 

```{r}
ggplot(data = lizards, aes(x = weight)) + 
  geom_histogram(color = '#caf0f8', fill = 'purple',
                 alpha = 0.5, 
                 linetype = "dotted")
```

## Updating aesthetics based on variables
In that case we need to use the 'aes()' function 
```{r}
ggplot(data = lizards, 
       aes(x = total_length, 
           y = weight)) + 
  geom_point(aes(color = common_name), 
             alpha = 0.3) 
```

# Themes 
## Update axis labels 
```{r}
ggplot(data = lizards, aes(x = weight, 
                           y = site)) + 
  geom_jitter(aes(color = common_name)) + 
  theme_minimal() + 
  labs(x = "Weight (grams)", 
       y = "Study Site", 
       title = "Lizard weights across sites at Jornada", 
       color = "Species")

```

## Reorder data 

```{r}
lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts, 
       aes(x = n,
           y = fct_reorder(common_name, n))) + 
  geom_col() + 
  labs(x = "Individuals", 
       y = "Species common name")
```


